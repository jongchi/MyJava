20210507 -----------------------------------------------------------------------------------------------------------------------------------


객체 지향 언어

시뮬라와 스몰톡 알아보기

클래스(붕어빵 틀)와 객체(붕어빵)에 대한 개념을 정확히 파악해야함.

객체는 동작 정보(메서드,행위), 상태 정보(생김새 등등)
현실세계에 있는 모든 것을 객체로 정의하여 코드화 시키는것.

클래스를 이용해 객체를 만드는 것 (인스턴스화 인스턴스=객체 완벽하지는 않지만 보통 동일시하여 사용함)

클래스 - 사용자 정의 타입

System.exit(0);를 하면 프로그램이 종료됨.

20210511 ------------------------------------------------------------------------------------------------------------------------------------

지역변수는 함수 안에서 실행될때 초기화를 먼저 시켜줘야함.

상속 : 기존 클래스를 재사용해서 새로운 클래스를 작성하는 ㄱ서
 	class 자손클래스 extends 조상클래스
        자손의 멤버개수는 조상보다 적을 수 없다.

오버로딩 : 같은 클래스 내에서 동일한 메소드에 다양한 기능을 넣고 싶을때
오버라이딩 : 상속받은 클래스에서 이름을 동일하게 쓰기 위한 재정의를 의미.

다형성
하나의 참조변수로 여러 타입의 객체를 참조할 수 있는 것.

super - 상속받은 클래스에서 부모의 멤버를 구별할 때 사용 

itgenius1004@gmail.com
# 프린트 문제 : 마킹해서 제출,
파일 : 이름.zip (소스 텍스트 파일)

1. 응용SW기초기술활용_문제해결시나리오_서술형_이름.txt

8비트 -> 1바이트 1024 바이트 -> 1KB 
데이터베이스 => SQL(Structured Query Language)
SELECT, INSERT, DELETE, UPDATE
INSERT(새로운 데이터를 입력하는 경우)
SQL = DML(조작), DCL(제어), DDL
Windows ip를 확인하는 명령은?  ipconfig
http://www.google.com:80 => http 80 port 
파일 전송 프로토콜 ftp 21 port
LAN(Local Area Network) !=> WIFI

20210513 ------------------------------------------------------------------------------------------------------------

OOP의 특성 
1. 캡슐화 : 정보은닉 
2. 상속성 : 해당되는 코드가 위의 클래스에게 상속받으면 아래 상속받는 코드에서도 그대로 이용가능한 것.
3. 다형성 : 상속되는 코드간에 오버라이드된 형태, 한 명령을 여러 형태로 출력 가능한 것.

인터페이스 : 구현코드가 없음.
	- 일종의 추상클래스, 추상클래스보다 추상화 정도가 높다
	- 실제 구현된 것이 없는 설계도
	- 인터페이스 생성 X ,클래스 작성에 도움
	* 인터페이스는 클래스를 규격화 시켜서 클래스를 만들때 ****를 만들어야해 하는 기능
	* 장점 : 표준화 되어있음.

추상클래스 : 클래스와 인터페이스의 중간 , 미완성 설계도

예외처리

컴파일 에러 - 컴파일할 때 발생하는 에러.
런타임 에러 - 실행할 때 발생하는 에러.
 
에러 - 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
예외 - 프로그램 코드에 의해서 수습될 수 있는 다소 미약한 오류

finally블럭
	예외가 있든 없든 무조건 실행되야하는 부분
	try와 catch는 필수적이지만 finally는 없어도 됨.

20210520 ------------------------------------------------------------------------------------------------------------

컬렉션 프레임워크

1. 리스트 - 중복  허용 

	- 어레이리스트 : 밸류타입으로 들어가도 받을때는 오브젝트로 받음
			겟클래스, 겟네임으로 하면 어떤 값인지 알 수 있음.	
			크기는 .size로 알아봄
			al.set(인덱스, 값) 하면 그 자리에 대체됨.
2. Comparable 버블쏘트를 만들어서 비교하는 용도로 썼었음

어레이리스트 해쉬맵 해쉬셋 프로퍼티가 컬렉션 클래스에서 가장 많이 사용됨.
위의 리스트들은 일반화(제네릭)이 다 적용됨.

3. 지네릭스 - 형변환의 번거로움을 줄이기 위해서 사용됨.

4. 애너테이션 - 작업할 때 자주 쓰는 기술은 자동인식돼서 나타날 수 있게 하는 것.

scala jvm - 함수형 언어(functional language)
java jvm - 객체지향적 언어(object oriented language)

5. 람다식 - 이름이 없는 함수, anonymous function
	클래스가 필요없고 바로 호출할 수 있음.


20210524 ------------------------------------------------------------------------------------------------------------

1. 스프링 프레임워크를 하지 않으면 취업이 불가능할 정도.
	- 배민,민원24, 국세청도 스프링 프레임워크 기반

2. 스프링 부트는 기존의 스프링 프레임워크를 더 쉽게 사용하기 위한 것.

3.  깃 - 단계별로 변화사항을 관리.
	- 파일(소스, 코드) 저장
	- 히스토리 (누가, 언제, 변경했는지)
	
4. 깃허브 - 웹에서 사람들과 깃을 공유하는 것.
	커밋 - 작업공간에서 작업이 끝났으면 로컬저장소에 적용하는 것.
	브런치 - 새로운 가지를 만들어서 다른 방식으로 개발해보는 것.
	merge - 마스터 브런치에 최종버전을 합병하는것.


깃 사이트에서 깃 설치 깃허브데스크탑 설치
.gitignore : 커밋해서 푸시할때 무시할 목록을 만드는 것. 

이번 주는 지난 번에 했던 것 이번 강사님에 맞게 재교육.

초기화 = 변수 선언 후 처음으로 data를 입력.
변수 이름 -> 소문자 시작 / 클래스 이름 -> 대문자 시작 = 식별하기 편하기 위해서.

20210526 ------------------------------------------------------------------------------------------------------------

인스턴스 변수 : 인스턴스가 생성될 때 변수값이 입력되고 인스턴스가 종료되면 변수가 삭제됨.
		이름이 같은 변수가 있다면 지역변수 > 인스턴스변수
이클립스에서 ctrl을 누르고 변수를 누르면 같은 변수를 보여줌

배열 : 변수의 집합 / 변수를 묶음으로 사용
	사용해야하는 변수가 많을때
	같은 타입이고, 성격이 같을 것
	
shift alt s 게터세터 만드는 창 가져오는거

국어, 영어, 수학, 총점 평균 점수 구해 놓기 

값을 하나 저장 -> 변수. 
같은 타입 여러개 저장 할때 - > 배열.
타입이 다른 데이터를 저장 할 때 - > 구조체
구조체 + 메소드 -> 클래스

상속의 특징 
1. 오버라이딩
2. 다형성 : 상위클래스 변수 = new 하위클래스();

20210528 --------------------------------------------------------------------------------------------
1.상속 : 가이드의 역할을 하기 위해 사용된다.
  - 새로운 클래스 생성
    기존의 클래스를 이용 -> 멤버들을 사용해서 새로운 클래스를 만듦.
	멤버(변수/메소드)
 - 오버라이딩 : 정의 부는 변경되지 않음. 
	       처리하는 처리부의 영역이 수정됨.
  
 - 다형성 : 상위 클래스에 하위 클래스를 집어넣을 수 있는 것.
	  하위 클래스에 상위클래스를 집어넣는 것은 불가능하다.
	  상위 -> 하위 타입으로 형변환 가능. caption tv -> (caption) tv 형변환 생략 불가
	  하위 -> 상위 타입으로 형변환 가능. tv -> caption tv 형변환 생략 가능 (자동으로 변환)

 - instanceof 연산자!
 	형변환이 가능한지 체크할 때 사용하는 연산자
	이항연산자 
	참조변수 instanceof 타입(확인하고자 하는 타입) boolean 타입으로 확인해주며 true면 형변환 가능;
	모든 class는 Object 클래스를 상속한다.

20210601 --------------------------------------------------------------------------------------------
*** 컬렉션 프레임워크 ***
1. Set : 중복 X 저장 순서 X
	- 대표 : HashSet, TreeSet / HashSet을 가장 많이 사용(탐색이 빠르기 때문)
	- 실무에서 자주 사용되지는 않음
	- 빠른 검색을 하기 위해서 해쉬 알고리즘을 사용함.
	- 같은 값인지 확인할 때, String은 글자 하나씩 같은지 확인, wrapper클래스는 하나만 존재

2. 해시 알고리즘의 이해(데이터의 구분)
	ex) 데이터를 3으로 나머지 연산하였을 때 얻게 되는 반환 값을 해시 값으로 하여 
		해시 값에 해당하는 부류에서만 존재 유무를 확인하면 되기에 처리속도가 빨라짐.

# 순서 : 1) List - 저장 순서 2) HashSet - 순서 X 3) TreeSet - 정렬 순서(오름차순 or 내림차순 등 프로그래머 정의)

4. TreeSet : 목적 - 데이터를 정렬해서 저장하고 싶을 때 사용.(웹개발에서 자주 이용되지는 않음, DB 사용하기 때문)

5. Map : Key 와 Value를 가짐
	- Key : 식별 용도, 중복 불가
 	- Value : 값, 중복 가능

ArrayList / HashMap / Properties 를 가장 많이 사용하게 될 것.

#자료 구조와 알고리즘 공부가 필수!!!!

20210603 --------------------------------------------------------------------------------------------
	
쓰레드 : 자원(메모리)을 더 잘 활용하기 위한 방법
프로세스 하나당 여러 작업이 가능하게 해줌
(실제로는 하나씩 아주 빠르게 전환되는 것이나 작업 스케줄러에 의해 시간을 배정 받아 cpu가 작업하는 것이기에
동시에 작업되는것처럼 보임)
기존 - 하나의 작업이 실행되고 있으면 다른 작업은 실행되지않음

ex) 회사 - 프로세스 / 기획자 - 스레드, 디자이너 - 스레드, 개발자 - 스레드.
  만들때에는 Thread = new Thread(); - run메소드를 오버라이딩 해주어야함.

자바는 메모리 영역을 세개로 구분함
1. 메소드 : class코드, static 변수,메소드 => 프로그램이 시작할 때.
2. 스택 : 지역변수, 메소드 호출 -> 쓰레드에서 run 실행할 경우 새로운 stack 영역을 생성했다가 종료되며 삭제
3. 힙 : 인스턴스 변수, 메소드

20210607 -----------------------------------------------------------------------------

요구사항 분석 
 - 시스템 구조도 -> 요구사항 구분(정성적,정량적) -> UML -> 유스케이스 다이어그램

1. 소프트웨어 요구사항
 - 시스템이 가져야 할 기능이나 시스템이 만족해야할 조건. : 시스템 구조도를 만드는 토대가 됨
 - 기능 비기능 요구사항 
	1) 기능 요구사항 :  정량적
	2) 비기능 요구사항 : 정성적 - 예쁘게, 3일후 까지
 - 사용자 요구사항
 - 시스템 요구사항 : 최근엔 대부분 오픈소스 기반의 SW를 이용

2. 소프트웨어 개발단계(SDLC) 
  * 요건 정의 : 요구사항 분석은 요건 정의와 분석에 해당
  * 분석
  * 설계
  * 구현
  * 테스트 
	1) 단위테스트 : 모듈 별로 테스트를 진행함 / JUNIT : 테스트 환경을 테스트하는 프레임워크
  * 배포운영 : 실제로 관리하지는 않을 가능성이 큼 / AWS를 이용해서 무료로 1년동안 사용가능
 
 - 요구사항 확인 주요활동
  * 기존 업무 분석활동 : 요구사항 확인에서 중요한 부분  
  * 기존 정보 시스템 분석활동 : ex) 기존에 서버를 몇 대 활용하는지, java로 언어를 바꿀수 있는지 등등
  
3. 현행시스템 파악
 - 현행 시스템 파악 주요활동 
  * 시스템 구성도
  * 인터페이스 관계를 확인
  * 오픈소스를 이용하고 있는지 MS를 이용한다면 바꿀수 있는지 등등
  * 하드디스크 서버 교체주기 : HDR 게임회사 5~6개월 
 	JDBC,MYSQL 을 JDBC에 연결해서 프로젝트 진행해볼예정
   
  *open API : 날씨, 카카오,구글 로그인과 같은 api가 주로 사용됨
	 	- 공공데이터포털을 정부에서 운영 중.
  * WAS = 웹 페이지 내에서 요청이 들어오면 그 요청을 웹문서로 바꿔서 보내줌
	
4. 개발 기술 환경 설정
 - 동시 접속자수, 쌓이는 데이터의 양에 따라 CPU용량, 메모리 용량, 디스크 용량을 설정해야함
 - 트랜잭션 : 하나의 작업 단위 ex)로그인 : 로그인 ID를 데이터베이스에 있는 ID,PW와 일치하는지 확인하고 완료
 
5. 요구사항 분석 기법
 - 객체 모델 -> 클래스 다이어그램(변수, 메소드, 상속, 포함)을 확인
 - Data model -> 데이터 구조 : 관계형DB(RDB)
 - 요구사항 협상 : 요구사항이 서로 상출될경우 적절하게 합의하는것.

20210609 -----------------------------------------------------------------------------

DBMS - Database management System : 소프트웨어
데이터베이스 - 실제 저장공간
데이터 모델 - 데이터 모델에 따라 저장, 검색, 관리의 방법이 모두 다름
저장, 검색, 관리(입력,수정,삭제)

-관계형 데이터베이스 
 * 데이터 저장 : 테이블 = 릴레이션(행과 열로 구성된 테이블)
 1) 관계relationship : 릴레이션 간에 생성되는 관계
 * 중복데이터가 발생하지 않도록 관계표현을 사용해서 처리
 2) 인스턴스 요소
  -tuple : 릴레이션의 행 릴레이션 내의 모든 tuple들은 서로 중복되지 않아야함.

오라클의 데이터 형
 - NUMBER(precision, scale) precision은 전체 자리 수, scale은 소수점 아래 자리 수
 - varchar2(길이) 길이의 입력값만큼을 최대길이로 한 문자열을 저장, 자동으로 크기 조절.

UML에서 관계표현을 할때 상속은 일반화로 표현한다.
추상클래스 or 인터페이스는 실체화 

오라클 11.2 다운방법
최상단 프로덕트 들어가서 오라클 데이터베이스 클릭
화면 바뀌면 다운로드
제일 아래까지 내려서 11g 릴리즈 다운
윈도우 64
로그인 다운
설치 중 SYS는 admin 

sql developer download
window 64 - bit with jdk 8 included 다운로드

sql 디벨로퍼
사용자 이름 sys 비밀번호 admin
비밀번호 저장
틀 sysdba
포트 기본값 1521
테스트 눌러서 성공뜨는지 확인
안되면 서비스 열고 오라클 시작 버튼 눌러야함

다른 사용자에서 HR 누르고 체크 되어있는것 풀고
비밀번호 tiger로 설정

<<<<<<< Updated upstream
20210611 ------------------------------------------------------------------------

sum,avg 함수 사용시 null값은 합을 구하는 대상에서 제외됨.

=======
20210610 ------------------------------------------------------------------------

# SQL 함수

데이터가 들어오면(input) 중간에 메소드를 실행하고 결과를 반환(output)
DB 에서 다루는 Data의 종류 - 숫자, 문자열, 날짜
 - 변환 함수
	숫자 -> 문자
	날짜 -> 문자
ex)  Java : util.date -> SimpleDataFormat 으로 변경 

1. 숫자 함수
	floor : 소수점 아래를 잘라낸다.
	log : LOG값을 반환한다
	power : power(m,n) m의 n승을 반환한다.
	round : 특정 자릿수에서 반올림
	trunc : 특정 자릿수에서 잘라냄(버림)

2. 문자 처리 함수
	upper : 대문자변환
	lower : 소문자 변환
	initcap : 첫 글자만 대문자로, 나머지는 소문자로 변환
	concat : 문자의 값을 연결
	length : 문자의 길이를 반환한다(한글 1byte)
	trim : 잘라내고 남은 문자를 표시한다.
	replace : 문자열에서 특정 문자를 생성한다.
3. 날짜 함수
	sysdate : 시스템 저장된 현재 날짜를 반환한다.
	
>>>>>>> Stashed changes

20210614 ---------------------------------------------------------------

sub Query 

메인 쿼리는 select, update, insert 모두 가능하지만
서브 쿼리안에는 받드시 select만 들어가야함

20210615 ----------------------------------------------------------------

SQL 문제 다 풀었으면 프로그래머스에서 문제 풀어보는 연습!!

유튜브에 자바로 ~~~구현하기 찾아보고 변수나 메소드 어떻게 만드는지 확인

관계형 데이터베이스 
 * 테이블 구조 생성, 변경 및 삭제하는 DDL
   테이블 - 저장하는 방식, 저장 공간을 생성해서 데이터를 저장

DDL - 생성 create / 변경 alter / 삭제 drop

도메인정의 : type, size
	sql 데이터 타입
	숫자 - number
	문자 - char, varchar	
	날짜 - date, timestamp(n) 주로 타임스탬프 사용 타임스탬프 사용시 날짜 + 시간까지 입력가능
						타임스탬프는 자바에서 받을때도 타임스탬프 타입으로 받는다.
자주 사용하는 데이터 타입
	CHAR(size), VARCHAR(size), NUMBER, LONG, TIMESTAMP

데이터 무결성을 위한 제약 조건 -> 부적절한 자료가 입력되는 것을 방지, 신뢰성을 잃으면 사용할 수 없음.
 - 도메인 제약
 - 개체 무결성 제약 (기본키 제약 조건) : 기본키 설정 방법
 - 참조 무결성 제약 ( 외래키 제약) : 참조하고 있는 테이블의 기본키를 참조.

not null : null을 허용하지 않는다
unique : 중복된 값을 허용하지 않는다.
primary key : not null + unique
foreign key : 참조하는 테이블의 칼럼의 값이 존재하면 허용한다.
check : 데이터 값의 범위나 조건을 지정하여 설정한 값만 하용 ex) sal number check sal > 500;
default : 따로 입력하지 않더라도 기본 값을 입력해줌.

테이블 레벨 방식으로 제약 조건 설정하기 
 not null은 옆에서만 지정 가능, 다른 제약 조건은 아래에서 지정

20210616 -----------------------------------------------------------------------------

DML

INSERT : 테이블 로우를 추가할 때 모든 컬럼에 자료를 입력하는 경우 컬럼명 생략 가능
	EX) insert into deptno1
	(                     ) 생략
	values ( 1,2,3,4);

null 값 삽입 
 - 암시적 방법 : 자동입력(컬럼 명 리스트에 컬럼 생략)
 - 명시적 방법 : null 값 직접 입력(values 리스트에 명시적으로 null 입력)

commit
 - DDL, DCL 명령문이 수행된 경우 자동으로 commit됨
 - **** DML과 DDL은 반드시 작업을 분리해서 진행할 것!!!!!!!!!!!!

20210617-------------------------------------------------------------------------------

회사에서 원하는 사람은 최종 결과물을 만들 수 있는 사람!

관계형 데이터 베이스

! 시퀀스 : 오라클에서 제공하는 객체, 숫자를 생성해주는 기능을 가지고 있음
	  일련번호처럼 연속된 숫자를 생성
	  기본키가 대리키 일 때 프로그램 안에서 일련번호를 자동으로 만들어 줌
 - currval : 현재 값을 반환
 - nextval : 현재 시퀀스값의 다음 값을 반환 -> insert 에서 생성할 때 주로 사용
 - drop 을 이용해서 시퀀스 제거

! 인덱스 : 객체!, 빠른 검색을 하기 위해 활용
	검색의 처리 속도를 향상 시키기 위해서 컬럼에 대해서 생성하는 오라클 객체.(mySQL에서도 사용 가능)
 - 인덱스의 단점 :	
	1) 오라클에서의 인덱스 내부 구조는 B*트리 형식으로 구성
	2) 인덱스 생성 후 새로운 행을 추가하거나 삭제할 경우 컬럼값이 함께 변경되는 경우 발생 (물리적 변경으로 인한 시간 소요)
	3) 인덱스가 많은 경우 -> DML 작업이 훨씬 무거워지게 됨. 성능 저하

 - 인덱스의 장점 
	1) 검색 속도가 빨라짐
	2) 시스템에 걸리는 부하를 줄여 시스템 전체 성능 향샹	

! 데이터 모델링  
 - 데이터베이스 라이프 사이클
    요구사항 수집 및 분석 -> 설계 -> 데이터베이스 구현
 
 1. 요구사항 수집 및 분석 : 참고할만한 레퍼런스와 결과물을 눈으로 확인 할 수 있는 것을 찾아야함
 
 2. 설계 
	1) 개념적 모델링 : 중요 개념을 구분, 핵심 entity 도출, ERD 작성
 	2) 논리적 모델링 : ERD-RDB 모델 사상(매핑, 상세화), 상세 속성 정의, 정규화, 스키마(도메인들의 집합) 정의
 	3) 물리적 모델링 : DB 개체 정의, 물리적으로 테이블, 인덱스 생성
	
 3. ER 모델 - Entity Relationship Model
	- 세상의 사물을 개체와 개체 간의 관계로 표현하는 개념적 모델링
	
 	- 개체 : 독립적인 의미를 지니고 있는 유무형의 사람 or 사물
		- 개체의 특성을 나타내는 속성(기본키-PK)에 의해 식별

 4.  ERD : ER모델을 표준화된 그림으로 나타낸 것.
	1) 개체 : 직사각형 / 관계 - 마름모 / 속성 - 타원
	- 개체 타입의 유형 
		1) 강한 개체 : 독자적으로 존재할 수 있는 개체 - default
		2) 약한 개체 : 독자적 X 상위 개체 타입을 가짐
	2) 속성 
	 	- key 속성 : 속성이 개체를 유일하게 식별할 수 있는 키 일때, 밑줄 그음
		- 다중 값 속성 : 여러 개의 값을 갖는 속성 ex) 취미
		- 유도 속성 : 유도가 가능한 속성 ex) 나이 - 출생년도로 유도 가능
		- 복합 속성 : 주소(시,구,동) 와 같이 여러 속성으로 구성된 속성 
	3) 관계 : 개체 사이의 연관성을 나타냄 관계 집합(relationship set)은 관계로 연결된 집합을 의미함

 - 차수에 따른 관계 타입의 유형
	- 1진 관계 : 한 개의 개체가 자기 자신과 관계를 맺음 ex) self join
	- 2진 관계 : 두 개의 개체가 관계를 맺음 - 대부분 사용
	- 3진 관계 : 세 개의 개체가 관계를 맺음 - 3진 이상은 무조건적으로 새로운 릴레이션을 생성해야함

  - 관계 대응 수 : 두 개체 타입의 관계에 실제로 참여하는 개별 개체 수
	- 일대일 관계 : ex) 회사 내에서 사원과 컴퓨터의 관계 
	- 일대다 관계 : ex) 학과와 학생의 관계
	- 다대일 관계 : ex) 학과와 학생의 관계
	- 다대다 관계 : ex) 학생과 학과의 관계

5. ER 모델을 관계 데이터 모델로 사상(mapping, 상세화)
 	완성된 eR모델은 실제 데이터베이스로 구축하기 위해 논리적 모델린 단ㄱ를 거침
	1단계 강한 개체 타입 : 정규 개체 타입 E의 경우 대응하는 릴레이션 R을 생성함
	2단계 약한 개체 타입 : 약한 개체 타입에서 생성된 릴레이션은 자신의 키와 함께 강한 개체 타입의 키를 외래키로 자신의 기본키를 구성함

20210618-------------------------------------------------------------------------------

! JDBC : 자바애플리케이션에서 표준화된 데이터베이스 접근 제공
	데이터베이스 벤더와 상관없이 동일한 개발이 가능함

현재 내 노트북 내 오라클 JDBC 라이브러리 설치 폴더
C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib
**** JDBC 드라이버 로드 -> 데이터베이스 연결 -> statement 생성 -> SQL 전송 -> 결과 -> 연결 종료  ****

 - sql 전송 과정에서 select 사용-> executeQuery / insert,update,delete -> executeUpdate 

20210621-------------------------------------------------------------------------------

미니팀 프로젝트 
 1. 주제 선정
  6/21 5시 20분 발표 시작

 2. 기능 정의 -> 리스트
	유스케이스
	클래스 다이어그램
 3. 분담 
 4. 코딩
	클래스 다이어그램
 5. PPT 
	주제, 컨셉
	유스케이스
	클래스 다이어그램 
 	코드 -> 설명
	시연 ( 동영상 촬영 시 oCam 사용)

 6. 제출물 : PPT( 양식 제한 X) + 코드

   


----------------------------------------------------------------------------

팀 이름

원 비트 클래스

Want Day // t는 묵음이야

----------------------------------------------------------------------------


1. 게임 프로젝트

2. 클래스(수강) 프로젝트

3. pos 시스템 프로젝트

4. 도서관 프로젝트


2번으로 결정

------------------------------------------------------------------------------

1. 클래스 분류

- 온라인 클래스
- 오프라인 클래스
- 주제별 클래스

2. 회원관리

- 강사
- 회원 수강생
- 비회원 수강생
- 관리자 

첫 화면
- 카테고리
  - 할인(할인율), 마감 임박(마감이 가까울 수록), 내 지역 근처(지역) 정렬




- 정렬된 강좌(약 5~8개)
- 회원 가입
- 로그인

홈 화면

-----------------------------------------------
비트클래스 
ㅁㄴ우ㅏㅁ누람ㄴㄹ르 배울 수 잇느~
-----------------------------------------------
1. 지금 할인중인 강좌(할인율 순)
2. 마감 임박 강좌(마감 임박 순)
3. 내 지역 근처 강좌(가나다 순)
4. 전체 보기
(   - 요리
    - 미술
    - 헬스
    - 프로그래밍
    - 음악 )



9. (로그인 / 로그 아웃) 둘 중 하나 표시
 - 수강생
  (ID, PW / 내정보 보기(내 정보 or 수강중인 강좌 정보 
		강좌, 포인트, 수정) / 강좌 선택(결제) / 결제 내역) 
 - 강사
  (ID, PW /  내 정보 , 강좌 관리(수강생 정보 확인, 리뷰 확인)
		강좌 추가 개설, 강의별 정산 금액, 총액
강사 
 1. 내 정보 보기
 2. 내 강좌 보기
         - 강좌 제목, 내용, 수강 인원, 수강 일자, 강좌 상태 정보, 강좌 수익
 3. 강좌 관리
 	1. 강좌 정보 수정
            2. 강좌 생성
            3. 강좌 삭제
4. 홈으로가기
5. 로그 아웃

회원
1. 내 정보 보기
        - 탈퇴
        - 정보 수정
2. 내 강좌 보기
        - 강좌 제목, 내용, 수강 인원, 수강 일자, 강좌 상태 정보, 강좌 가격
        - 선택한 강좌로 이동(인덱스로 이동)
3. 홈으로가기
4. 로그 아웃


0. 회원 가입
 1. 수강생
   - 아이디
   - 패스워드
   - 사는 지역
   - 관심 분야

 2. 강사
   - 아이디
   - 패스워드
   - 자격정보
   - 사무실 위치
   - 경력
   - 개설 강좌 정보


강좌
- 수강 가능 지역
- 주제
- 주차 기능
- 수업 시간
- 강좌 인원
- 리뷰
- 별점(인원, 점수) 
- 수강 기간
- 온라인, 오프라인 정보
- 금액


관리자
- 아이디
- 패스워드
- 강좌 개설
- 강사 등록


회원
- 강좌 조회
- 수강 신청
- 회원별 기능
- 멤버쉽 포인트


비회원
- 강좌 조회




기능 분리

1. 멤버 클래스 (로그인 / 회원 가입)
   - 강사
   - 수강생
   - 비회원
2. 강좌 클래스 (강좌 화면)
3. 메인 클래스 (UI)
4. 금액 클래스


회원 
회원번호


강사

강의

20210629 --------------------------------------------------------------
클라이언트 - 서버의 관계에서
클라이언트는 요구(요청)를 하면 서버에서 응답을 하는 구조
서버는 요청을 분석해서 응답해야함 - web server라는 소프트웨어를 이용해서 처리

- Apache는 Linux 기반으로 이용(윈도우는 정식으로 지원하지 않음)
- 윈도우는 AMP를 이용

- 웹서버들은 default port인 80을 사용.

웹표준
HTML5 + CSS3 + JavaScript 

웹을 만들 때 사용하는 표준 

자바스크립트 : ECMA 6 (2015) 에 표준화
	- 브라우저에서 사용하는 부가적인 기능 ( 사용자와의 인터렉션)
	- 현재는 서버, 프레임워크, SPA(single page application) - 하나의 페이지에서 필요한 부분만 변경, 빅데이터 -> AI

HTML - 입력양식 태그를 집중해서 더 볼 것 
	- 입력양식 태그 : 사용자 입력을 받아 서버와 통신할 때 사용하는 태그
	- 반응형 웹 : 화면 사이즈에 따라서 크기가 달라지는 웹페이지

웹서버 : 치킨집, 웹 페이지 제공
웹 페이지 : 치킨
클라이언트 : 요청 
서버 : 제공 + 제공하기 위한 요청 분석 + 응답 

**************** 입력양식 ************** 
### 매우 중요하니 꼭 숙지할 것.

HTML을 이용하여 클라이언트가 서버로 데이터를 보내는 가장 기본적인 방법

<form> -> 묶고 보내는 기능
  <input>
</form>

get : url(주소)의 뒤에 데이터를 붙여서 보냄, 보안에 취약
post : 별도의 방법을 사용해 데이터를 해당 주소로 전달
	- 별도의 방법 : http의 body에 데이터를 넣어 한번 감싼 후 보내는 방식


20210630 -------------------------------------------------------------------------------

css 선택자(selector)

 - 클래스 선택자 : 여러 개의 속성을 한꺼번에 변경할 때 사용
 - id 속성은 중복되지 않아야하지만 class는 여러 개의 태그에 중복 사용 가능
 - 속성 선택자

 - 후손 선택자를 선택하기 위해서는 부모 선택자 (공백) 후손 선택자 순서로 기입해야하는 것을 주의
 - 자손 선택자는 부모선택자>후손 선택자

20210701 -------------------------------------------------------------------------------

CSS3 단위
 - 키워드 : 자주 사용하는 스타일이 자동으로 적용
 - 크기 : % & px(픽셀) & em(배수)/ width, height 등등
 - 색상 : rgb(R,G,B) / rgba(red,green,blue,alpha) alpha는 투명도 /#000000(16진수) or # ooo /
 - url : background-image 단위를 url로 사용

상대경로와 절대 경로
 - 상대경로 
	현재 폴더 : url('*******.jpg');
	하위 폴더 : url('하위폴더/******.jpg');
	상위 폴더 : url('../******.jpg');
	루트 폴더 : url('/****.jpg');

박스 속성 
 - 속성이 block을 가지고 있는 tag에서 표현되는 영역을 정의
 - width & height
 - border : 테두리의 두께
 - margin : 테두리 외부 간격
 - padding : 테두리 내부와 글자 사이의 간격

  1. border
   1) border-width : 테두리 두께 지정, 크기 or 키워드 입력
   2) border-style : 테두리의 형태 지정, 키워드 입력 ex)solid, double (최근 웹사이트를 보면 대부분 solid만 사용)
   ** border는 크기값 내에서 처리 되는게 아니라 외부에 새로 생기는 것을 주의 100px크기의 이미지 border 5를 주면 100+5+5 = 110 크기

  2. margin 
   1) margin은 각각 지정할 수 있고, margin-top/margin-left or margin : 10 10 20 20 형태로 사용

display 속성
 - none : 태그를 화면에서 보이지 않게 만듦
 - block : 블록 형식으로 지정
 - inline : 인라인 형식으로 지정
 - inline-block : 인라인-블록 형식으로 지정

배경 속성 
 - background-image : 배경 이미지를 지정하는 속성
 - background-size: 배경 이미지 크기를 조절하는 속성 ex) 50%
 - background-repeat: repeat이 default / 
			repeat-x -> x축으로 이미지 반복 / 
			repeat-y -> y축으로 이미지 반복 / 
			no-repeat -> 반복하지 않음
 - background-attachment: fixed; : scroll을 움직여도 배경이미지가 고정된 자리에 위치
 - background-position: 키워드, x축, y축 모두 입력 가능

font-size 속성
 - font-size : px을 지정해서 대부분 사용
 - font-family : 글꼴 지정, 사용자 pc에 font가 없을 경우를 대비해 여러 font를 ,로 나누어서 입력
 ** 웹폰트! 구글 폰트 사용해서 추가하는 방법 숙지 
 - font-style : 글자의 기울기 조정
 - font-weight: 글자의 두께 조정

z-index : 숫자가 큰 태그가 가장 화면 위에서 보이게 된다.

overflow 
 - hidden : 영역을 넘어가는 범위는 화면에 구현하지 않는다.
 - scroll : 영역을 넘는 여부에 상관없이 스크롤을 만든다. overflow-x / overflow-y
 - auto : 영역과 나타낼 태그를 맞춰, 필요시 스크롤 생성.

float 속성
 - 웹페이지를 만들 때 가장 많이 사용하는 속성, 레이아웃을 만들 때.
 - left : 태그를 왼쪽에 붙임
 - right : 태그를 오른쪽에 붙임

nav 바에서 ul 태그 사용 + input text + submit


